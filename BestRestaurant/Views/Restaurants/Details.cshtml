@{
  Layout = "_Layout";
}

@model BestRestaurant.Models.Restaurant
@using BestRestaurant.Models

<h1>@Html.DisplayFor(model => model.Name) Restaurant Details</h1>
<hr />

<div class="content">
  @* Format for navigating to another controller type with the id of the parent controller *@
  <h4>@Html.ActionLink("Write a review", "Create", "Reviews", new { id = @Model.RestaurantId })</h4>
  <h3>Reviews:</h3>

  <div class="reviews">
    @* If you dont check for 0 entries the program will error out *@
    @if(@Model.Reviews.Count == 0) {
      <p>There are no reviews for this restaurant.</p>
    } else {
      @foreach (Review review in @Model.Reviews)
      {
        <div class="review">
          <p>Date: @review.Date</p>
          <p>Name: @review.Name</p>
          <p>Rating: @review.Rating</p>
          <p>@review.Text</p>
          <p>@Html.ActionLink("Edit this review", "Edit", "Reviews", new { id = @review.ReviewId })</p>
        </div>
      }
    }
  </div>



  <h3>Cuisines:</h3>
  @* Var join is for our many to many relationship *@
  @foreach (var join in @Model.Cuisines)
  {
    <p>@join.Cuisine.Type</p>
  }
</div>


<div class="links">
  <p>@Html.ActionLink("Back to restaurants", "Index")</p>
  <p>@Html.ActionLink("Edit Restaurant", "Edit", new { id = Model.RestaurantId })</p>
  <p>@Html.ActionLink("Add a Cuisine", "AddCuisine", new { id = Model.RestaurantId })</p>
  <p>@Html.ActionLink("Delete Restaurant", "Delete", new { id = Model.RestaurantId })</p>
</div>
