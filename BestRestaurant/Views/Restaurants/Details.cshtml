@{
  Layout = "_Layout";
}

@model BestRestaurant.Models.Restaurant
@using BestRestaurant.Models

<h2>Restaurant Details</h2>
<hr />
<h3>@Html.DisplayNameFor(model => model.Name): @Html.DisplayFor(model => model.Name)</h3>

@* Format for navigating to another controller type with the id of the parent controller *@
<p>@Html.ActionLink("Write a review", "Create", "Reviews", new { id = Model.RestaurantId })</p>

<h3>Reviews:</h3>
@* If you dont check for 0 entries the program will error out *@
@if(@Model.Reviews.Count == 0) {
  <h3>There are no reviews for this restaurant.</h3>
} else {
  @foreach (Review review in @Model.Reviews)
{
  <div>
    <h5>Name: @review.Name</h5>
    <h5>Date: @review.Date</h5>
    <h5>Rating: @review.Rating</h5>
    <p>@review.Text</p>
  </div>
}

}


<h3>Cuisines:</h3>
@* Var join is for our many to many relationship *@
@foreach (var join in @Model.Cuisines)
{
  <p>@join.Cuisine.Type</p>
  @using(Html.BeginForm("DeleteCuisine", "Cuisines"))
  {
    @Html.Hidden("joinId", @join.CuisineRestaurantId)
    <input type="submit" value="Delete">
  }
}

<p>@Html.ActionLink("Back to restaurants", "Index")</p>
<p>@Html.ActionLink("Edit Restaurant", "Edit", new { id = Model.RestaurantId })</p>
<p>@Html.ActionLink("Add a Cuisine", "AddCuisine", new { id = Model.RestaurantId })</p>
<p>@Html.ActionLink("Delete Restaurant", "Delete", new { id = Model.RestaurantId })</p>